name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with black
      run: |
        python_files=$(find . -name "*.py" -not -path "./agents/*" -type f | tr '\n' ' ')
        if [ -n "$python_files" ]; then
          black --check $python_files
        else
          echo "No Python files to check with black"
        fi

    - name: Lint with isort
      run: |
        python_files=$(find . -name "*.py" -not -path "./agents/*" -type f | tr '\n' ' ')
        if [ -n "$python_files" ]; then
          isort --check $python_files
        else
          echo "No Python files to check with isort"
        fi

    - name: Lint with flake8
      run: |
        python_files=$(find . -name "*.py" -not -path "./agents/*" -type f | tr '\n' ' ')
        if [ -n "$python_files" ]; then
          flake8 $python_files
        else
          echo "No Python files to check with flake8"
        fi

    - name: Type check with mypy
      run: |
        python_files=$(find . -name "*.py" -not -path "./agents/*" -type f | tr '\n' ' ')
        if [ -n "$python_files" ]; then
          mypy $python_files
        else
          echo "No Python files to check with mypy"
        fi

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint  # Lint 작업이 성공해야 테스트 실행

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test ci_test_app
      run: python -m pytest ci_test_app/tests --cov=ci_test_app --cov-report=term --cov-report=xml:ci_test_app-coverage.xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./ci_test_app-coverage.xml
        fail_ci_if_error: true

  build-and-push:
    name: Build and Push Docker Images
    needs: test  # 테스트 작업이 성공해야 빌드 실행
    runs-on: ubuntu-latest
    # Only run on push to main or develop, not on PRs
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push ci_test_app
      uses: docker/build-push-action@v4
      with:
        context: ./ci_test_app
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ci_test_app:latest,${{ secrets.DOCKER_HUB_USERNAME }}/ci_test_app:${{ github.sha }}
